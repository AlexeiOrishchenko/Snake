Next version:
1) Room.class : Разорвать зависимость от View; 5
2) Room.class : Добавить условие победы; 1
3) Room.class : Добавить счет; 2
4) Room.class : Смена скорости; 3

5) Controller.class : Реализовать Controller;
6) Controller.class : Все запросы из view к model шли через controller; 3
7) Controller.class : Интерфейс для Controller; 2
8) Controller.class : Недоступность кнопки Play когда игра начата; 4
9) ModelInterfaceExtended : После реализации Controller удалить. Доступ будет через Controller только;
10) resources - разбить по папкам;


In Future:
1) ExitGUI.class - 1) Сделать резиновым изменение картинки;
2) MainMenuGUI.class - 1) Сделать резиновым изменение картинки;
3) jUnit
4) setting package весь сделать по аналогии с mainmenu либо наоборот. Еще подумаю об абстрктных классах;
5) AbstractComponent.class - 1) Удалить, перенести все методы в соответствующие классы;
6) Реализовывать контроллер начать;
7) При нажатии на наклейку и сдвиге что бы все равно срабатывало действие;
8) При нажании на ENTER в setting сохранялись изменения;
9) Проверку на sizeOfGame к ширине экрана;
10) Сделать менеджен для включения-выключения окон;
11) SwingUtilities;
12) Разобраться как оформить все в 1 окне;


По игре:
- Многопоточность: Либо перейду на Flow, либо модернизирую concurrent свой;
- Общий класс для старта (ближе к финальной версии игры сделаю);
- jUnit (В ближайшем будущем все покрою тестами);
- Сделать все поля настраевыми в игре через гетеры и сетеры;
- Сделать все резиновым - изменение размера окон влечет за собой изменения внутрених размеров компонентов;
- MVC - сделать внедряемым - в controller - model & view, в view - controller;
- Сделать PlayGUI не JForm, внедрять его в окно (как JPanel или типа того), передават, его в Model через Controller ( чтото типо Observer);


---===MVC===---
controller -> Controller.class -> no dependency -> 1,2,3,4

model -> objects -> mouse -> Mouse.class -> no dependency -> finally done
model -> objects -> room -> Room.class -> PlayGUI.class, Layer.class dependencies -> 1,2,3,4,5
model -> objects -> snake -> Snake.class -> no dependency -> finally done
model -> objects -> snake -> SnakeDirection.class ->  no dependency -> finally done
model -> objects -> snake -> SnakeSection.class ->  no dependency -> finally done
model -> Model.class -> no dependency -> finally done
model -> ModelInterface.class -> no dependency -> finally done
model -> ModelInterfaceExtended.class -> no dependency -> finally done

view -> swing -> graphics -> Layer.class -> Room.class dependency -> 1,2
view -> swing -> gui -> exit -> ExitGUI.class -> no dependency -> 1,2,3
view -> swing -> gui -> info -> InfoGUI.class -> no dependency -> 1
view -> swing -> gui -> mainmenu -> MainMenuGUI.class -> no dependency -> 1,2,3
view -> swing -> gui -> mainmenu -> component -> ComponentBottomRight.class -> no dependency -> finally done
view -> swing -> gui -> mainmenu -> component -> ComponentExit.class -> no dependency -> finally done
view -> swing -> gui -> mainmenu -> component -> ComponentInfo.class -> no dependency -> finally done
view -> swing -> gui -> mainmenu -> component -> ComponentMainMenu.class -> no dependency -> finally done
view -> swing -> gui -> mainmenu -> component -> ComponentPlay.class -> no dependency -> 1
view -> swing -> gui -> mainmenu -> component -> ComponentSetting.class -> no dependency - finally done
view -> swing -> gui -> mainmenu -> component -> ComponentTopLeft.class -> no dependency -> finally done
view -> swing -> gui -> mainmenu -> component -> ComponentTopRight.class -> no dependency -> finally done
view -> swing -> gui -> play -> PlayGUI.class -> Room.class dependency -> 1,2,3,4
view -> swing -> gui -> setting -> SettingGUI.class -> no dependency -> 1
view -> swing -> gui -> setting -> component -> AbstractComponent.class -> no dependency -> 1
view -> swing -> gui -> setting -> component -> ComponentColorFace.class -> no dependency -> 1,2
view -> swing -> gui -> setting -> component -> ComponentColorHead.class -> no dependency -> 1,2
view -> swing -> gui -> setting -> component -> ComponentColorMouse.class -> no dependency -> 1,2
view -> swing -> gui -> setting -> component -> ComponentColorSnake.class -> no dependency -> 1,2
view -> swing -> gui -> setting -> component -> ComponentEnter.class -> no dependency -> 1
view -> swing -> gui -> setting -> component -> ComponentRoomHeight.class -> Room.class dependency -> 1,2,3
view -> swing -> gui -> setting -> component -> ComponentRoomWidth.class -> Room.class dependency -> 1,2,3
view -> swing -> gui -> setting -> component -> ComponentSetting.class -> no dependency -> finally done
view -> swing -> gui -> setting -> component -> ComponentSizeOfGame.class -> no dependency -> 1
view -> swing -> setting -> Setting.class -> no dependency -> 1,2,3,4


Controller.class
1) Добавить через контроллер закрытие главного меню при нажатии Play и открытие при завершении игры;
2) Сделать интерфейс для контроллера;
3) Все запросы из view к model шли через controller;
4) Недоступность кнопки Play когда игра начата;

Mouse.class
- finally done;

Room.class
1) Условие победы;
2) Сделать счет (не понятно сколько и чего в процессе игры);
3) Допилить смену скорости (Сделаю рандомное ускорение или замедление) в методе sleep;
4) Refactor Room класс, много методов нужно делегировать в CONTROLLER (Они должны вызыватся из контроллера точнее);
5) Разорвать зависимости из Room;

Snake.class
- finally done;

SnakeDirection.class
- finally done;

SnakeSection.class
- finally done;

Model.class
- finally done;

ModelInterface.class
- finally done;

ModelInterfaceExtended.class
- finally done;

Layer.class
1) Пометь голову ( на задницу );
2) Налипить графику;

ExitGUI.class
1) Сделать резиновым изменение картинки;
2) Сделать нормальный выход вместо выход "рубильником";
3) Сделать инициализацию данного класса из класса стартера;

InfoGUI.class
1) Сделать инициализацию данного класса из класса стартера;

MainMenuGUI.class
1) Сделать резиновым изменение картинки;
2) Может допилю всякие паскалки на кликание по анимашкам;
3) Сделать инициализацию данного класса из класса стартера;

ComponentBottomRight.class
- finally done;

ComponentExit.class
- finally done;

ComponentInfo.class
- finally done;

ComponentMainMenu.class
- finally done;

ComponentPlay.class
1) Вызывать PlayGUI.class в котором будет реализация анимашек старта, проиграша или победы;

ComponentSetting.class
- finally done;

ComponentTopLeft.class
- finally done;

ComponentTopRight.class
- finally done;

PlayGUI.class
1) Разобратся что сделать с Observer методами, и куда их деть;
2) Перенести методы получания размеров комнаты в контроллер и получать из него, эим же мы и разорвем
    зависимость от Room;
3) Реализация анимашек старта, проиграша или победы;
4) Допилить закрывалку на крестик в игре;

SettingGUI.class
1) Сделать инициализацию данного класса из класса стартера;

ComponentAbstract.class
1) Удалить, перенести все методы в соответствующие классы;

ComponentColorFace.class
1) Переделать класс, либо будет наложена графика либо сделать в выкатывающемся меню с выбором цвета, либо палитра;
2) Автоопределение цвета (Пока это проблема);

ComponentColorHead.class
1) Переделать класс, либо будет наложена графика либо сделать в выкатывающемся меню с выбором цвета, либо палитра;
2) Автоопределение цвета (Пока это проблема);

ComponentColorMouse.class
1) Переделать класс, либо будет наложена графика либо сделать в выкатывающемся меню с выбором цвета, либо палитра;
2) Автоопределение цвета (Пока это проблема);

ComponentColorSnake.class
1) Переделать класс, либо будет наложена графика либо сделать в выкатывающемся меню с выбором цвета, либо палитра;
2) Автоопределение цвета (Пока это проблема);

ComponentEnter.class
1) Изменить после рефакта всех компонентов Setting;

ComponentRoomHeight.class
1) Разорвать зависимость от Room;
2) Деллегировать метод настройки высоты в controller;
3) Рефакторинг класса;

ComponentRoomWidth.class
1) Разорвать зависимость от Room;
2) Деллегировать метод настройки ширины в controller;
3) Рефакторинг класса;

ComponentSetting.class
- finally done;

ComponentSizeOfGame.class
1) Рефакторинг класса;

Setting.class
1) ЦВЕТА в enum ( Пока думаю над этим, ибо парсинг цвета затратный увы );
2) Сетеры для цветов настроить в вехний регистр (Если небудет графики либо Enum то это как вариант);
3) Сериализация и десириализация(К самому концу проекта буду думать нужно ли это);
4) Экран при перезаходе в игру полный или не полный ( После сериализации только возможно );
